{"version":3,"sources":["domino/effects.cljc"],"mappings":";;;;AAKA,AAAA,AAAMA,AAAkBC;AAAxB,AACE,AAACC,AACC,AAAAC,AAAKM;AAAL,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA6BO;AAA7B,AAAAH,AAAAJ,AAAA,AAAiBM;AAAjB,AACE,AAACR,AACC;AAAKD,AAAQW;AAAb,AACE,AAACC,AAAOZ,AAAQW,AAAK,AAAA,AAACE,AAAKC,AAASJ;;AACtCF,AACAC;AANN,AAQET;;AAEJ,AAAA,AAAMe,AAAgBf,AAAQgB;AAA9B,AACE,AAACC,AAAO,AAAKN;AAAL,AAAW,AAACJ,AAAIP,AAAQW;AACxBK;;AAEV,AAAA,AAAAE,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAc,AAAAA;AAAAA,AAAyDK;AAAzD,AAAAlB,AAAAa,AAAA,AAA2CG;AAA3C,AAAAhB,AAAAa,AAAA,AAAiDI;AAAjDH,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAAC,AAAAe,AAAAA;AAAA,AAAAd,AAAAc,AAAA,AAAsEZ;AAAtE,AAAAF,AAAAc,AAAA,AAA6EK;AAA7E,AACE,AAAAC,AAASF;AAATG,AAAa,AAACC,AAAmBN,AAAMC,AAAGf;AAA1C,AAAA,AAAAkB,AAAAC,AAAAD,AAAAC,AAACF,AAAAA,AAAAA;;AAEH,AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3B,AAAA,AAAA2B,AAAA,AAAA,AAAA,AAAA,AAAA1B,AAAAC,AAAAyB,AAAAA;AAAAA,AAC2DN;AAD3D,AAAAlB,AAAAwB,AAAA,AACWE;AADX,AAAA1B,AAAAwB,AAAA,AAC8C/B;AAD9C,AAEE,AAACC,AACC;AAAKiC,AAAQxB;AAAb,AACE,AAAA,AAAQ,AAACyB,AAAUD,AAAQxB;AACzB,AAAI,AAACY,AAAgBG,AAAIf;;AACrB,AAAC0B,AAAKF,AAAQxB;;AAClBwB;;;AALN,AAOO,AAACG,AAAIC,AAAML,AACX,AAAChB,AAAOsB,AACRC,AACA,AAAA,AAACzB,AAAef","names":["domino.effects/effects-by-paths","effects","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__37501","map__37502","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","out","inputs","effect","path","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","domino.effects/change-effects","changes","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p__37504","p__37505","map__37506","map__37507","domino.effects/execute-effect!","model","db","ctx","handler","G__37510","G__37511","domino.graph/get-db-paths","p__37512","map__37513","domino.effects/execute-effects!","change-history","visited","cljs.core/contains?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/first","domino.util/generate-sub-paths","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns domino.effects\n  (:require\n    [domino.graph :as graph]\n    [domino.util :refer [generate-sub-paths]]))\n\n(defn effects-by-paths [effects]\n  (reduce\n    (fn [out {:keys [inputs] :as effect}]\n      (reduce\n        (fn [effects path]\n          (update effects path (fnil conj []) effect))\n        out\n        inputs))\n    {}\n    effects))\n\n(defn change-effects [effects changes]\n  (mapcat (fn [path] (get effects path))\n          changes))\n\n(defn execute-effect! [{:domino.core/keys [model db] :as ctx} {:keys [inputs handler]}]\n  (handler ctx (graph/get-db-paths model db inputs)))\n\n(defn execute-effects!\n  [{:keys [change-history] :domino.core/keys [effects] :as ctx}]\n  (reduce\n    (fn [visited effect]\n      (if-not (contains? visited effect)\n        (do (execute-effect! ctx effect)\n            (conj visited effect))\n        visited))\n    #{}\n    (->> (map first change-history)\n         (mapcat generate-sub-paths)\n         distinct\n         (change-effects effects))))                        ;; TODO: double check this approach when changes is a sequential history\n"]}