shadow$provide.module$node_modules$react_lifecycles_compat$react_lifecycles_compat_cjs=function(global,process,require,module,exports,shadow$shims){function componentWillMount(){var state=this.constructor.getDerivedStateFromProps(this.props,this.state);null!==state&&void 0!==state&&this.setState(state)}function componentWillReceiveProps(nextProps){this.setState(function(prevState){prevState=this.constructor.getDerivedStateFromProps(nextProps,prevState);return null!==prevState&&void 0!==prevState?
prevState:null}.bind(this))}function componentWillUpdate(nextProps,nextState){try{var prevProps=this.props,prevState=this.state;this.props=nextProps;this.state=nextState;this.__reactInternalSnapshotFlag=!0;this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(prevProps,prevState)}finally{this.props=prevProps,this.state=prevState}}Object.defineProperty(exports,"__esModule",{value:!0});componentWillMount.__suppressDeprecationWarning=!0;componentWillReceiveProps.__suppressDeprecationWarning=!0;componentWillUpdate.__suppressDeprecationWarning=
!0;exports.polyfill=function(Component){var prototype=Component.prototype;if(!prototype||!prototype.isReactComponent)throw Error("Can only polyfill class components");if("function"!==typeof Component.getDerivedStateFromProps&&"function"!==typeof prototype.getSnapshotBeforeUpdate)return Component;var foundWillMountName=null,foundWillReceivePropsName=null,foundWillUpdateName=null;"function"===typeof prototype.componentWillMount?foundWillMountName="componentWillMount":"function"===typeof prototype.UNSAFE_componentWillMount&&
(foundWillMountName="UNSAFE_componentWillMount");"function"===typeof prototype.componentWillReceiveProps?foundWillReceivePropsName="componentWillReceiveProps":"function"===typeof prototype.UNSAFE_componentWillReceiveProps&&(foundWillReceivePropsName="UNSAFE_componentWillReceiveProps");"function"===typeof prototype.componentWillUpdate?foundWillUpdateName="componentWillUpdate":"function"===typeof prototype.UNSAFE_componentWillUpdate&&(foundWillUpdateName="UNSAFE_componentWillUpdate");if(null!==foundWillMountName||
null!==foundWillReceivePropsName||null!==foundWillUpdateName)throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+(Component.displayName||Component.name)+" uses "+("function"===typeof Component.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()")+" but also contains the following legacy lifecycles:"+(null!==foundWillMountName?"\n  "+foundWillMountName:"")+(null!==foundWillReceivePropsName?"\n  "+foundWillReceivePropsName:
"")+(null!==foundWillUpdateName?"\n  "+foundWillUpdateName:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks");"function"===typeof Component.getDerivedStateFromProps&&(prototype.componentWillMount=componentWillMount,prototype.componentWillReceiveProps=componentWillReceiveProps);if("function"===typeof prototype.getSnapshotBeforeUpdate){if("function"!==typeof prototype.componentDidUpdate)throw Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");
prototype.componentWillUpdate=componentWillUpdate;var componentDidUpdate=prototype.componentDidUpdate;prototype.componentDidUpdate=function(prevProps,prevState,maybeSnapshot){componentDidUpdate.call(this,prevProps,prevState,this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:maybeSnapshot)}}return Component}}
//# sourceMappingURL=module$node_modules$react_lifecycles_compat$react_lifecycles_compat_cjs.js.map
