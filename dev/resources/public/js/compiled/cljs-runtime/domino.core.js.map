{"version":3,"sources":["domino/core.cljc"],"mappings":";;;;;;AAOA,AAAA;;;;;;;;;;;;;;;AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAcFQ;AAdJ,AAeG,AAAA,AAACC,AAAWD;;;AAff,AAAA,AAAA,AAAAN,AAAMF,AAgBwCa;AAhB9C,AAAA,AAAAV,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAgBsCK;AAhBtC,AAAAD,AAAAJ,AAAA,AAgBYO;AAhBZ,AAAAH,AAAAJ,AAAA,AAgBkBQ;AAhBlB,AAAAJ,AAAAJ,AAAA,AAgB0BS;AAhB1B,AAkBG,AAACE,AAAiC,AAACC,AAA2BP;;AAE9D,AAAME,AAAO,AAACM,AAAmBN;AAC3BE,AAAO,AAACK,AAAqBP,AAAME;AADzC,AAAA,AAAA,AAAA,AAAA,AAEkBF,AACAE,AACA,AAACM,AACC;AAAKC,AAAaC;AAAlB,AACE,AAAAC,AAAY,AAAA,AAAKD;AAAjB,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAACC,AAAMJ,AAAaG,AAAGF;;AACvBD;;;AARxB,AAAA,AAAA,AAIkB,AAMEP,AACF,AAACY,AAAyB,AAACC,AAAsBf,AAAMC,AACvDE,AACA,AAACa,AAAmBd;;;AAjCzC,AAAA,AAAA,AAAMZ;;AAAN,AAmCA;;;;;AAAA,AAAM2B,AAIHC,AAAIC;AAJP,AAKE,AAAMC,AAAY,AAACC,AAAqBH,AAAIC;AAA5C,AACE,AAACG,AAAyBF;;AAC1BA;;AAEJ;;;;;AAAA,AAAMG,AAIHL,AAAIM;AAJP,AAKE,AAACP,AAASC,AAAI,AAACO,AAA+BP,AAAIM","names":["var_args","G__37516","domino.core/initialize","js/Error","p__37517","map__37518","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","schema","domino.core.initialize.cljs$core$IFn$_invoke$arity$2","model","effects","events","initial-db","domino.validation/maybe-throw-exception","domino.validation/validate-schema","domino.model/model->paths","domino.model/connect-events","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","events-by-id","event","temp__5718__auto__","id","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","domino.effects/effects-by-paths","domino.model/connect-effects","domino.graph/gen-ev-graph","domino.core/transact","ctx","changes","updated-ctx","domino.graph/execute-events","domino.effects/execute-effects!","domino.core/trigger-events","event-ids","domino.graph/events-inputs-as-changes"],"sourcesContent":["(ns domino.core\n  (:require\n    [domino.effects :as effects]\n    [domino.graph :as graph]\n    [domino.model :as model]\n    [domino.validation :as validation]))\n\n(defn initialize\n  \"Takes a schema of :model, :events, and :effects\n\n  1. Parse the model\n  2. Inject paths into events\n  3. Generate the events graph\n  4. Reset the local ctx and return value\n\n  ctx is a map of:\n    ::model => a map of model keys to paths\n    ::events => a vector of events with pure functions that transform the state\n    ::effects => a vector of effects with functions that produce external effects\n    ::state => the state of actual working data\n    \"\n  ([schema]\n   (initialize schema {}))\n  ([{:keys [model effects events] :as schema} initial-db]\n   ;; Validate schema\n   (validation/maybe-throw-exception (validation/validate-schema schema))\n   ;; Construct ctx\n   (let [model  (model/model->paths model)\n         events (model/connect-events model events)]\n     {::model        model\n      ::events       events\n      ::events-by-id (reduce\n                       (fn [events-by-id event]\n                         (if-let [id (:id event)]\n                           (assoc events-by-id id event)\n                           events-by-id))\n                       {}\n                       events)\n      ::effects      (effects/effects-by-paths (model/connect-effects model effects))\n      ::db           initial-db\n      ::graph        (graph/gen-ev-graph events)})))\n\n(defn transact\n  \"Take the context and the changes which are an ordered collection of changes\n\n  Assumes all changes are associative changes (i.e. vectors or hashmaps)\"\n  [ctx changes]\n  (let [updated-ctx (graph/execute-events ctx changes)]\n    (effects/execute-effects! updated-ctx)\n    updated-ctx))\n\n(defn trigger-events\n  \"Triggers events by ids as opposed to data changes\n\n  Accepts the context, and a collection of event ids\"\n  [ctx event-ids]\n  (transact ctx (graph/events-inputs-as-changes ctx event-ids)))\n"]}