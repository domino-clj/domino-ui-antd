{"version":3,"sources":["domino/validation.cljc"],"mappings":";;AAEA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA4CO;AAA5C,AAAAH,AAAAJ,AAAA,AAAiCM;AAAjC,AACE,AAACE,AACC;AAAAC,AAAgCG;AAAhC,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAAA,AAA2BH;AAA3B,AAAAH,AAAAM,AAAA,AAAaC;AAAb,AACE,AAAI,AAACE,AAAKD;AACR,AAAAE,AAAY,AAAA,AAAKF;AAAjB,AAAA,AAAAE;AAAA,AAAAA,AAASC;AAAT,AACE,AAAI,AAACC,AAAUL,AAASI;AACtB,AAAA,AAAA,AAAA,AAAA,AAACE,AAAOV,AAAYW,AAAM,AAAA,AAAA,AAAqBH,AAAyBA;;AACxE,AAAA,AAACE,AAAOV,AAAcW,AAAKH;;;AAH/B;;;AAIAR;;;AACJA,AACA,AAACY,AAAOC,AAAQd;;AAEpB,AAAA,AAAAe,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAApB,AAAAC,AAAAmB,AAAAA;AAAAA,AAAuDf;AAAvD,AAAAH,AAAAkB,AAAA,AAAkCE;AAAlC,AAAApB,AAAAkB,AAAA,AAAyCX;AAAzC,AACE,AAAMc,AAAY,AAACC,AAAQV,AAAUL;AAArC,AACE,AAACH,AACC;AAAKD,AAAIQ;AAAT,AACE,AAAI,AAACU,AAAAA,AAAAA,AAAYV,AAAAA;AACfR;;AACA,AAAA,AAAA,AAAA,AAAA,AAACU,AAAOV,AAAYW,AAAM,AAAA,AAAA,AAA0BH,AAAyBA;;;AACjFR,AACA,AAACY,AAAO,AAACQ,AAAKP,AAAQ,AAAA,AAAA,AAACQ,AAAwBJ;;AAErD,AAAA,AAAAK,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7B,AAAA,AAAA6B,AAAA,AAAA,AAAA,AAAA,AAAA5B,AAAAC,AAAA2B,AAAAA;AAAA,AAAA1B,AAAA0B,AAAA,AAAqCE;AAArC,AACE,AAAM,AAACC,AAAUD;AAAjB,AACE,AAAO,AAAA,AAAA,AAACE,AAAQ,AAAsDF;;AADxE;;;AAGF,AAAA,AAAMG,AAAiB5B;AAAvB,AACE,AAAA,AAAIA,AACA,AAAA,AAAA,AAAA,AAAA,AAAC6B,AAED/B,AACAkB","names":["p__37419","map__37420","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","domino.validation/check-valid-model","model","ctx","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__37422","map__37423","path-ids","item","cljs.core/map?","temp__5718__auto__","id","cljs.core/contains?","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/flatten","p__37428","map__37429","domino.validation/check-valid-events","events","id-in-path?","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","p__37431","map__37432","domino.validation/maybe-throw-exception","errors","cljs.core/not-empty","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","domino.validation/validate-schema","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns domino.validation)\n\n(defn check-valid-model [{:keys [model] :as ctx}]\n  (reduce\n    (fn [{:keys [path-ids] :as ctx} item]\n      (if (map? item)\n        (if-let [id (:id item)]\n          (if (contains? path-ids id)\n            (update ctx :errors conj [(str \"duplicate id \" id \" in the model\") {:id id}])\n            (update ctx :path-ids conj id)))\n        ctx))\n    ctx\n    (mapcat flatten model)))\n\n(defn check-valid-events [{:keys [events path-ids] :as ctx}]\n  (let [id-in-path? (partial contains? path-ids)]\n    (reduce\n      (fn [ctx id]\n        (if (id-in-path? id)\n          ctx\n          (update ctx :errors conj [(str \"no path found for \" id \" in the model\") {:id id}])))\n      ctx\n      (mapcat (comp flatten (juxt :inputs :outputs)) events))))\n\n(defn maybe-throw-exception [{:keys [errors]}]\n  (when (not-empty errors)\n    (throw (ex-info (str \"errors found while validating schema\") {:errors errors}))))\n\n(defn validate-schema [ctx]\n  (-> ctx\n      (assoc :path-ids #{}\n             :errors [])\n      check-valid-model\n      check-valid-events))"]}