{"version":3,"sources":["syn_antd/reagent_utils.cljs"],"mappings":";;;AAKA,AAAA,AAAMA,AACHC;AADH,AAEE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AACsBM;AADtB,AAAAF,AAAAJ,AAAA,AACWK;AADX,AAEE,AAAME,AAAY,AAACC,AAAKH;AAAxB,AACE,AAAA,AAAA,AAAA,AAAA,AAACI,AAKE;AAAAC,AAAAC,AAAKI;AAAL,AAAA,AAAAH,AAAAF;AAAA,AAAAG,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAAF,AAAAD,AAAA,AAAA,AAAUI;AAAVF,AAAAH;AAAA,AAAAE,AAAAC,AAAA,AAAA,AAAsBC;AAAtB,AAAAF,AAAAC,AAAA,AAAA,AAAwBG;AAAxB,AAEE,AAAI,AAAA,AAAAC,AAACC,AAAK,AAAA,AAAQF,AAAYV;AAC5B,AACE,AAACa,AAAOb,AAAY,AAAA,AAAQU;;AAD9B;;AAKA,AAACE,AAAK,AAAA,AAACE,AAAOJ,AACR,AAAA,AAACI,AAAOL;;;AAdrB,AAiBG;AAAKM;AAAL,AAAA,AACGxB,AACI,AAACyB,AAAmBD,AAEpB,AAAA,AAAA,AAAAJ,AAACM,AAAcjB,AACf,AAAA,AAACkB,AACO;AAAoBC;AAApB,AACE;AAAuBC;AAAvB,AAEE,AAACP,AAAOb,AAAY,AAAAqB,AAAgB,AAAUD;AAA1B,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAASA;;AACTF;;;;AACtB,AAACG,AAA0BR;;AAG3B,AAAM,AAAA,AAAA,AAAOI;AAAb,AAAiC,AAACA,AAAAA,AAAAA,AAAmBC,AAAAA;;AAArD","names":["syn-antd.reagent-utils/fixed-async-input","original-component","p__37092","map__37095","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","value","_props","local-value","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.core/create-class","p__37101","p__37102","vec__37103","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__37106","_","old-props","new-props","cljs.core/deref","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","this","reagent.core/props","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.update.cljs$core$IFn$_invoke$arity$3","original-on-change","e","temp__5718__auto__","target","reagent.core.force_update.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns syn-antd.reagent-utils\n  (:require\n    [reagent.core]))\n\n;; Adapted thanks to https://github.com/metametadata/problems/blob/919abde1997dafef26e1dc8388bb58645ac6f79b/src/hello_world/core.cljs#L45\n(defn fixed-async-input\n  [original-component]\n  (fn fixed-component\n    [{:keys [value] :as _props}]\n    (let [local-value (atom value)]                         ; regular atom is used instead of React's state to better control when renders should be triggered\n      (reagent.core/create-class\n        {:display-name\n         \"AntdReagentInput\"\n\n         :should-component-update\n         (fn [_ [_ old-props] [_ new-props]]\n           ; Update only if value is different from the rendered one or...\n           (if (not= (:value new-props) @local-value)\n             (do\n               (reset! local-value (:value new-props))\n               true)\n\n             ; other props changed\n             (not= (dissoc new-props :value)\n                   (dissoc old-props :value))))\n\n         :render\n         (fn [this]\n           [original-component\n            (-> (reagent.core/props this)\n                ; use value only from the local atom\n                (assoc :value @local-value)\n                (update :on-change\n                        (fn wrap-on-change [original-on-change]\n                          (fn wrapped-on-change [e]\n                            ; render immediately to sync DOM and virtual DOM\n                            (reset! local-value (if-let [target (.-target e)]\n                                                  (.-value target)\n                                                  e))\n                            (reagent.core/force-update this)\n\n                            ; this will presumably update the value in global state atom\n                            (when (some? original-on-change) (original-on-change e))))))])}))))"]}