{
"version":3,
"file":"module$node_modules$warning$warning.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAmBjHC,MAAAA,CAAUA,QAAQ,EAAG,EAGvB,KAAIC,aAAeA,QAAqB,CAACC,MAAD,CAASC,IAAT,CAAe,CACrD,IAAIC,IAAMC,SAAAC,OACVH,KAAA,CAAWI,KAAJ,CAAgB,CAAN,CAAAH,GAAA,CAAUA,GAAV,CAAgB,CAAhB,CAAoB,CAA9B,CACP,KAAK,IAAII,IAAM,CAAf,CAAkBA,GAAlB,CAAwBJ,GAAxB,CAA6BI,GAAA,EAA7B,CACEL,IAAA,CAAKK,GAAL,CAAW,CAAX,CAAA,CAAgBH,SAAA,CAAUG,GAAV,CAElB,KAAIC,SAAW,CACXC,IAAAA,CAAU,WAAVA,CACFR,MAAAS,QAAA,CAAe,KAAf,CAAsB,QAAQ,EAAG,CAC/B,MAAOR,KAAA,CAAKM,QAAA,EAAL,CADwB,CAAjC,CAGqB,YAAvB,GAAI,MAAOG,QAAX,EACEA,OAAAC,MAAA,CAAcH,GAAd,CAEF,IAAI,CAIF,KAAUI,MAAJ,CAAUJ,GAAV,CAAN,CAJE,CAKF,MAAOK,CAAP,CAAU,EAnByC,CAsBvDf,OAAA,CAAUA,QAAQ,CAACgB,SAAD,CAAYd,MAAZ,CAAoBC,IAApB,CAA0B,CAC1C,IAAIC,IAAMC,SAAAC,OACVH;IAAA,CAAWI,KAAJ,CAAgB,CAAN,CAAAH,GAAA,CAAUA,GAAV,CAAgB,CAAhB,CAAoB,CAA9B,CACP,KAAK,IAAII,IAAM,CAAf,CAAkBA,GAAlB,CAAwBJ,GAAxB,CAA6BI,GAAA,EAA7B,CACEL,IAAA,CAAKK,GAAL,CAAW,CAAX,CAAA,CAAgBH,SAAA,CAAUG,GAAV,CAElB,IAAeS,IAAAA,EAAf,GAAIf,MAAJ,CACE,KAAUY,MAAJ,CACF,2EADE,CAAN,CAKGE,SAAL,EACEf,YAAAiB,MAAA,CAAmB,IAAnB,CAAyB,CAAChB,MAAD,CAAAiB,OAAA,CAAgBhB,IAAhB,CAAzB,CAbwC,CAkB9CN,OAAAC,QAAA,CAAiBE,MA9DoG;",
"sources":["node_modules/warning/warning.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$warning$warning\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","warning","printWarning","format","args","len","arguments","length","Array","key","argIndex","message","replace","console","error","Error","x","condition","undefined","apply","concat"]
}
