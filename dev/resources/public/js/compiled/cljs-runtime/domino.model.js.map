{"version":3,"sources":["domino/model.cljc"],"mappings":"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","names":["domino.model/normalize","path-segment","cljs.core/map?","cljs.core/second","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/rest","var_args","G__37174","domino.model/paths-by-id","js/Error","root","domino.model.paths_by_id.cljs$core$IFn$_invoke$arity$3","mapped-paths","path","vec__37178","seq__37179","cljs.core/seq","first__37180","cljs.core/next","segment","opts","children","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","temp__5718__auto__","id","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/empty?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/merge","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","domino.model/model->paths","model","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__37191","vec__37192","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__37195","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","p__37201","map__37202","domino.model/id-for-path","path->id","cljs.core/butlast","domino.model/wrap-pre","handler","pre","vec__37208","seq__37209","first__37210","interceptor","cljs.core/reverse","domino.model/wrap-post","post","cljs.core/identity","domino.model/wrap","ctx","inputs","outputs","G__37220","G__37221","domino.model/ids-to-interceptors","id->path","id->opts","ids","k","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","domino.util/generate-sub-paths","p1__37223#","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/not-empty","p__37236","map__37300","domino.model/connect-events","events","path-for-id","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","p__37345","map__37346","event","p1__37230#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","p1__37231#","p__37362","map__37363","domino.model/connect-effects","p1__37355#","p1__37357#"],"sourcesContent":["(ns domino.model\n  (:require\n    [domino.util :as util]))\n\n(defn normalize [path-segment]\n  (if (map? (second path-segment))\n    path-segment\n    (into [(first path-segment) {}] (rest path-segment))))\n\n(defn paths-by-id\n  ([root] (paths-by-id {} [] root))\n  ([mapped-paths path path-segment]\n   (let [[segment opts & children] (normalize path-segment)]\n     (if segment\n       (let [path         (conj path segment)\n             mapped-paths (if-let [id (:id opts)]\n                            (assoc mapped-paths id {:path path\n                                                    :opts opts})\n                            mapped-paths)]\n         (if-not (empty? children)\n           (apply merge (map (partial paths-by-id mapped-paths path) children))\n           mapped-paths))\n       mapped-paths))))\n\n(defn model->paths [model]\n  (reduce\n    (fn [model [id {:keys [path opts]}]]\n      (-> model\n          (update :id->path assoc id path)\n          (update :path->id assoc path id)\n          (update :id->opts assoc id opts)))\n    {}\n    (apply merge (map paths-by-id model))))\n\n(defn id-for-path [{:keys [path->id]} path]\n  (loop [path-segment path]\n    (when-not (empty? path-segment)\n      (if-let [id (get path->id path-segment)]\n        id\n        (recur (butlast path-segment))))))\n\n(defn wrap-pre [handler pre]\n  (let [[interceptor & pre] (reverse pre)]\n    (reduce\n      (fn [handler interceptor]\n        (interceptor handler))\n      (interceptor handler)\n      pre)))\n\n(defn wrap-post [post]\n  (reduce\n    (fn [handler interceptor]\n      (interceptor handler))\n    identity\n    (reverse post)))\n\n(defn wrap [handler pre post]\n  (cond\n    (and (empty? pre) (empty? post))\n    handler\n\n    (empty? post)\n    (wrap-pre handler pre)\n\n    (empty? pre)\n    (let [post (wrap-post post)]\n      (fn [ctx inputs outputs]\n        (post (handler ctx inputs outputs))))\n\n    :else\n    (let [handler (wrap-pre handler pre)\n          post    (wrap-post post)]\n      (fn [ctx inputs outputs]\n        (post (handler ctx inputs outputs))))))\n\n(defn ids-to-interceptors\n  \"finds the interceptors based on the provided ids\n  the lookup will consider parent path segments\"\n  [path->id id->path id->opts ids k]\n  (->> (map id->path ids)\n       (mapcat util/generate-sub-paths)\n       (mapcat #(get-in id->opts [(path->id %) k]))\n       (distinct)\n       (remove nil?)\n       (not-empty)))\n\n;;TODO ensure all keys are unique!\n(defn connect-events [{:keys [path->id id->path id->opts]} events]\n  (let [path-for-id (fn [id] (get id->path id))]\n    (mapv\n      (fn [{:keys [inputs] :as event}]\n        (let [pre  (ids-to-interceptors path->id id->path id->opts inputs :pre)\n              post (ids-to-interceptors path->id id->path id->opts inputs :post)]\n          (-> event\n              (update :inputs #(map path-for-id %))\n              (update :outputs #(map path-for-id %))\n              (update :handler wrap pre post))))\n      events)))\n\n(defn connect-effects [{:keys [id->path]} events]\n  (let [path-for-id (fn [id] (get id->path id))]\n    (mapv\n      (fn [event]\n        (-> event\n            (update :inputs #(map path-for-id %))\n            (update :outputs #(map path-for-id %))))\n      events)))\n\n"]}